<div>
<h3>RAST2, the Incremental Commands</h3>
<p>
In the previous tutorial, we demonstrated how to run the RAST2 default pipeline. 
In this tutorial, we will step through the individual commands, discuss available options and show how to add data to a genome typed object.
We will also show some of the additional scripts that are not part of the standard pipeline.
As before, these commands will work in the IRIS environment or in the KBase app.
</p>
<p>
To start this tututorial we will retrieve the E. coli K-12 contig from the KBase central store.  
To do this type:
</p>
 
<pre>
    <code title=â€œiris-tutorial"> echo "kb|g.0" | genomes_to_contigs | contigs_to_sequences  &gt; E_coli.contig </code>   
</pre>

<p>


</div>
<div>


<h2>RAST2 Incremental Commands </h2>
<p>
The power of RAST2 lies in ability to chose custom annotation scripts or to add your own. 
To provide an illustration, we will step through the incremental steps and at the end we use an additional script that annotates prophages using a program called PhiSpy.  
</p>


<h3>The Concept of the <i>Genome Typed Object</i> </h3>
<p>
All of the individual commands available in the RAST2 pipeline add data to a special file type called a genome typed object (GTO). 
A GTO is a JSON file that is compatible with KBase. 
Annotations are incrementally appended to this file until it is ready for export. 
Thus, one might start with an empty GTO, add the contigs, run a command that identifies genes, run another command that assigns functions to the genes, and so forth. 
</p>

</div>
<div>


<p>
To create a GTO from scratch we will use the command
</p>
<pre>
    rast2-create-genome 

    options:
        -o --output            file to which the output is to be written
        -h --help              print usage message and exit
           --url               URL for the genome annotation service
           --genome-id         Genome identifier
           --scientific-name   Scientific name (Genus species strain) for the genome
           --domain            Domain (Bacteria/Archaea/Virus/Eukaryota) for the genome
           --genetic-code      Genetic code for the genome (usually 11 for most organisms or 4 Mycoplasmas etc.)
           --source            Source (external database) name for this genome
           --source-id         Identifier for this genome in the source (external source)
           --contigs           Fasta file containing DNA contig data
</pre>


</div>
<div>


We will use this command to create a GTO for the E. coli contig that we downloaded previously by typing:
<pre>
<code title ="iris-tutorial">rast2-create-genome --scientific-name "Escherichia coli K-12" --genetic-code 11 --domain Bacteria --contigs E_coli.contig > E_coli.gto </code>
</pre>
<p>
An alternative form for directly retrieving GTOs from the KBase central store is:
</p>
<pre>
     cs_to_genome </code> 'kb|g.0' > E_coli.gto
</pre>
<p>
In this case, the domain, genetic code, and scientific name are retrieved from the database. 
</p>

</div>
<div>

<p>
In the above examples, we have built the GTO in one step.  
However, for more complex jobs, it is possible to start with an empty GTO and add or alter metadata (contigs, source database, scientific name, etc.) using the scripts:
</p>
<pre>
     rast2-set-metadata < input GTO > output GTO
     rast2-add-contigs  < input GTO > output GTO
</pre>



</div>
<div>


<h3> Individual Analysis Tools </h3>

The default RAST2 pipeline performs the following steps which are described in detail below, but each step can also be called individually.
<p>
<pre>
     1.  Calls rRNAs with a custom BLAST-based tool
     2.  Calls tRNAs with tRNAscan
     3.  Calls large repeat regions
     4.  Calls seleno proteins
     5.  Calls pyrrolysyl proteins
     6.  Calls CRISPRs
     7.  Calls the protein-encoding genes with prodigal
     8.  Annotates protein-encoding genes with kmers (version 2)
     9.  <font color="red">Performs a basic gene overlap removal </font>
</pre>


<p>
The tools that we list below represent a growing collection that can be invoked to alter/enhance the annotations for a genome represented by a GTO.
</p>

</div>
<div>


<h3>Calling RNA Genes</h3>

For the rRNA genes use: 
<pre>
     <code title ="iris-tutorial"> rast2-call-features-rRNA-SEED  < E_coli.gto > GTO.2 </code>
</pre>

<p>
If you look at "GTO.2" you will see that it is the same as the original gto file except that
the rRNA calls have been appended. All scripts work this way until the gto is exported
in a designated format. "rast2-call-feautures-rRNA-SEED" is a
specialty script developed by Gary Olsen that finds rRNA genes uisng BLAST.
</p>


</div>
<div>


For the tRNA genes use:
<pre>    
     <code title ="iris-tutorial"> rast2-call-features-tRNA-trnascan < GTO.2 > GTO.3 </code>
</pre>

<p>
<a target=_blank_ href="http://www.ncbi.nlm.nih.gov/pubmed/9023104?dopt=Abstract">Citation</a>
</p>

</div>
<div>

<h3>Identification of Genes Related to Selenocysteine and Pyrrolysine</h3>

In some genomes, machinery exists to support inclusion of unusual amino acids.  In the case
of selenocysteine and pyrrolysine you can use a tools created by Gary Olsen to locate and annotate genes
related to selenocysteine and pyrolysine usage:
<pre>
       <code title ="iris-tutorial"> rast2-call-features-selenoprotein < GTO.3 > GTO.4 </code>
       <code title ="iris-tutorial"> rast2-call-features-pyrrolysoprotein  < GTO.4 > GTO.5 </code>
</pre>
<p>
Both of these scripts were developed by Gary Olsen.
</p>

</div>
<div>

<h3> Calling Protein-encoding Genes</h3>
For Prodigal use:
<pre>
    <code title ="iris-tutorial"> rast2-call-features-CDS-prodigal < GTO.5 > GTO.6 </code>
</pre>
<p>
<a target=_blank_ href="http://www.ncbi.nlm.nih.gov/pubmed/?term=20211023"> Citation </a>
</p>

Normally one would run prodigal or glimmer.

For Glimmer use:
<pre>
    <code title ="iris-tutorial"> rast2-call-features-CDS-glimmer3 < GTO.5 > GTO.6 </code>
</pre>

<p>
<a target=_blank_ href="http://www.ncbi.nlm.nih.gov/pubmed/?term=17237039"> Citation </a>
</p>

</div>
<div>

<h3>Annotating Protein-encoding Genes</h3>

For Kmer based annotations we suggest: 
<pre>
       <code title ="iris-tutorial"> rast2-annotate-proteins-kmer-v2 < GTO.6 > GTO.7 </code>
       or
       <code title ="iris-tutorial"> rast2-annotate-proteins-kmer-v1 < GTO.6 > GTO.7 </code>
</pre>

<p>
These scripts assign functions to protein-encoding genes by performing a kmer-based search.  That is, GTO.7 will be the updated GTO with
the functions of a subset of the PEGs added. The "v1" and "v2" refer to the data set that the kmers
were built from. "v2" is the default pipeline kmer set and it is built from all of the annotated proteins in the core SEED.  
We also retain (but no longer support) a v1 version where the kmers are built from Figfams.  "v1" is consistent with previous versions of RAST, but "v2" provides more consistent annotations.
</p>


</div>
<div>


<h3> Calling CRISPRs </h3>
To call CRISPR regions use:
<pre>
<code title ="iris-tutorial">  rast2-call-features-crispr < GTO.7  > GTO.8 </code>

</pre>

</div>
<div>


<h3>Calling Repeat Regions </h3>

<pre>
<code title ="iris-tutorial"> rast2-call-features-repeat-region-SEED < GTO.8 > GTO.9 </code>

options:
        --min-identity
        --min-length
</pre>
<p>
This program uses BLAST to search within the genome to find repeat regions.
The minimum nucleotide identity and mininimum length for the match can be specified.
</p>


</div>
<div>


<h3>Let's add Prophage </h3>
<p>
Now that we have performed the standard steps in the RAST2 pipleine, we will add prophage elements to the GTO. 
</p>

<pre>
 <code title ="iris-tutorial"> rast2-call-features-prophage-phispy < GTO.9 > GTO.10 </code>
</pre>
<p>
This command may take a few minutes to run.  
When it completes we have have a GTO that is customized with phage elements as a feautre types.  
We list some of the additional scripts that are avialable for use below.  
We plan to continue adding specialty annotation scripts to this pipeline.  
To see all of the RAST2 scripts that are currently available, click on the "Genome Annotation Commands" link in the Command List toobar.
</p>


</div>
<div>


<h3> <font color="red"> Removing Overlapping Gene Calls </h3>

The basic strategy used by RAST2 is to use a selected set of tools to propose potential
genes.  This includes tools to call different types of genes (e.g., RNAs and protein-encoding genes),
as well as different tools to call the same types of genes (e.g., there are multiple
tools provided for proposing calls for protein-encoding genes).
<p>
To produce a <i>genomeTO</i> that can be used to support construction of metabolic models,
one should merge these sets of proposed genes into a single, "best estimate".  We form this
best estimate by looking at the entire collection of proposed genes, deleting some that appear
specious, and then keeping the remaining set.  Each gene in the merged set will include a very
crude <i>score</i> between 0 and 1 estimating confidence levels for the calls (the numbers should
be thought os as ordered, but the precise values have little statistical justification).
</p>
</font>


</div>
<div>


<h3> Exporting the Annotated Genome in a Desired Format  </h3>
<p> 
Now that we have gone through all of the individual steps, we will want to export our genome. 
We will export the data as a feature table.  
To do this type:
</p>
<pre>
    <code title ="iris-tutorial">rast2-export-genome --feature-type feature_data < GTO.11 > E_coli.table</code>    

    Using the --feature-type option allows you to export your genome in many different formats:
        genbank         Genbank format
        genbank_merged  Genbank format as single merged locus, suitable for Artemis
        feature_data    Tabular form of feature data
        protein_fasta   Protein translations in fasta format
        contig_fasta    Contig DNA in fasta format
        feature_dna     Feature DNA sequences in fasta format
        gff             GFF format
        embl            EMBL format
</pre>

<p>
Note that not all output formats support the new feature types from the RAST2 pipeline.  
For instance, we would not see the phage feature type from physpy in the protein_fasta formatted output. 
<font color="red"> The tab-delimited "feature-data" format will contain all of the feature types that were created. </font> 
</p>


</div>
<div>


<h2> Additional Speciality Gene Calling Programs </h2>

<h3>Finding Streptococcus box elements</h3>

<p>
When the user invokes "rast2-process-genome", these scripts are run only if the genus is declared as Streptococcus.  This is an example of why it is important that the user declared information be as accurate as possible.
</p>
<pre>
   rast2-call-features-strep-pneumo-repeat < GTO.1 > GTO.2
   rast2-call-features-strep-suis-repeat   < GTO.1 > GTO.2

       options:
           -i   --input      file from which the input is to be read
           -o   --output     file to which the output is to be written
           -h   --help       print usage message and exit
                --url           URL for the genome annotation service</pre>
</pre>
<p>
<a target=_blank_ href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3049150">Citation</a>
</p>


</div>
<div>


<h3> Calling Prophage with PhiSpy </h3>
<p>
to call prophage  genes with phiSpy use:
</p>
<pre>
    rast2-call-features-prophage-phispy < GTO.1 > GTO.2 
</pre>
<p>
<a target=_blank_ href="http://www.ncbi.nlm.nih.gov/pubmed/?term=22584627">Citation</a>
</p>


</div>
<div>


<h3><font color="red">Inheriting Gene Names From a Reference Genome</h3></font>


</div>
<div>


 <font color="red"><h3> Creating CDD Annotation Tables</h3>



<a target=_blank_ href="http://www.ncbi.nlm.nih.gov/pubmed/23197659">Citation</a>
</font>


</div>
<div>


<h2> Adding Additional Features From and External Source/Program </h2>

<p>
If you have speciality scripts or annotations that you would prefer to add to your GTO before exporting, you can use:
</p>
<pre>
    rast2-add-features features-file < input GTO  > output GTO

        The features file is tab-delimited and must contain the following fields:

        id           ID of the feature. A new feature ID will be assigned for this feature
        location     Location of the feature on the contig, in the format ContigID_<start-pos>[+=]<length>
        feature-type The type of feature (CDS, rna, etc.)
        function     Function assigned to the feature.
        aliases <font color="red"> (optional) </font>      Comma-separated list of aliases for this feature
        
</pre>  


</div>
<div>


<h2>Additional RAST2 Scripts<h2>

<h3>Assigning Functions to Putative Protein-encoding Genes Using Kmer Analysis</h3>

<p>
There are applications, particularly in metagenomics, where it is desirable to find the regions of a
contig or read that may contain proteins without the need for a gene caller.  To do this in Rast2, use:
</p> 

<pre> 
     call_features_ProtoCDS_kmer_v1 < GTO.1 > GTO.2
     call_features_ProtoCDS_kmer_v2 < GTO.1 > GTO.2
</pre> 

<p> As above, v1 are figfam based kmers and v2 are functional role based kmers.
</font>

</div>
<div>


<h1>Summary</h1>

The RAST2 Toolkit being developed at Argonne National Laboratory will offer a framework
for constructing customized annotation pipelines.  This is useful for at least two purposes:
<ol>
<li>Customized pipelines offer a means of incorporating genus-specific algorithms like the tools
for recognizing <i>Streptococcus</i>-specific repeats.  These specialized tools offer the ability
to rapidly propagate advances in tools to immediately impact the rapidly emerging collections of genomes.
<li>The second major use of the RAST2 Toolkit will be to evaluate alternative approaches to annotations.
We anticipate introducing a number of feature-calling algorithms, and RAST2 offers a framework for
evaluating alternative approaches.
</ol>
</div>
