KBase Services Python API
==========================

What this document is
    This document describes the KBase Services API.
    For a kinder, gentler introduction see 
    the :doc:`Quickstart </functions-quick>` and :doc:`Tutorial </functions-tut>`.

.. currentmodule:: biokbase.narrative.common

**Contents**

* :ref:`intro`
* :ref:`api`
* :ref:`api-examples`

.. _intro:

Introduction
-------------

This page describes both the high-level and underlying Python APIs for 
wrapping KBase services as collections of functions in the Narrative.
The recommended usage of this API is to use the `high-level-api`_, but 
the lower-level methods are also documented here for developers and those
needing more flexibility.

First, a couple of terms:

_`method` or `function`
    A KBase function, usually invoking one or more KBase services to do its work,
    that will appear in the narrative as a single widget with parameters and a Run button.

_`service`
    A group of related functions, with a name.

**Requirements**

Each `function`_ [#svcmeth]_ should be self-describing, and long-running functions
(which, in terms of interactive operation, is most of them) should provide
intermediate progress indications. Thus, the minimal requirements of functions are:

- metadata
    - version [x.y.z]
    - name
    - description
    - list of parameters
    - list of outputs
    - status
- parameter metadata
    - name
    - type
    - description
- output metadata
    - [name], type, description
    - [name] may be replaced by position in a list
- status
    - success/failure
    - if failure, then an exception with named fields will be returned

We have specified these requirements in a Python class, :class:`Service`, whose documentation is below.

.. _api:

API Documentation
------------------

.. currentmodule:: biokbase.narrative.common.service

This section documents the KBase narrative service and function [#svcmeth]_ API.
These modules are all under `biokbase.narrative` in the biokbase Python package.

The API is broken down into several areas:

#. :ref:`high-level-api` - Creating new methods using the ``@method`` decorator, interacting with the service API through ``init()`` and ``finalize()``.
#. :ref:`registry-api`  - Finding services and methods
#. :ref:`services-api` - Classes for KBase services and service methods
#. :ref:`types-api` - Classes for KBase types
#. :ref:`exceptions-api` - Exception hierarchy
#. :ref:`lifecycle-api` - Extensible actions for method state transitions

See :ref:`api-examples` for an example of API usage. You can run the example code yourself by executing the `service.py` module as a script, e.g.::

    python -m biokbase.narrative.common.service

The output from this example will contain, in addition to the output from the `print()` statements,
lines beginning with `@@` that have status information.
These lines are generated by the :class:`LifecyclePrinter` instance that is automatically
created and added to each service.

.. _high-level-api:

High-Level API
^^^^^^^^^^^^^^

As described in the :doc:`Quickstart </functions-quick>`, the high-level API
allows you to write a new KBase narrative service with minimum fuss. All you
need to do is initialize, wrap each method with the ``@method`` decorator,
then finalize.

.. autofunction:: init_service

.. autofunction:: finalize_service

Method Decorator
~~~~~~~~~~~~~~~~~

Each function (service method) needs to be decorated with the ``@method`` decorator.
For a detailed example of creating a new function with this decorator, see the
:doc:`Tutorial </functions-tut>`.

.. autofunction:: method

.. _registry-api:



Registry
^^^^^^^^

.. autofunction:: register_service

.. _services-api:

Services
^^^^^^^^

The two classes that new functions (service methods) will need to instantiate are
the :class:`Service` (one per group of methods) and :class:`ServiceMethod`.
See the :func:`example` for a usage example.

.. automodule:: biokbase.narrative.common.service

.. autoclass:: Service
    :members: name, desc, version, __init__

.. _function:

.. autoclass:: ServiceMethod
    :members: set_func, __call__, estimated_runtime,
              started, advance, done, error

.. _types-api:

Types
^^^^^
KBase data types are represented with classes in the `kbtypes` module.

.. automodule:: biokbase.narrative.common.kbtypes
    :members:

.. _exceptions-api:

Exceptions
^^^^^^^^^^

.. currentmodule:: biokbase.narrative.common.service

.. autoclass:: ServiceError

.. autoclass:: ServiceMethodError

.. autoclass:: ServiceMethodParameterError

.. _lifecycle-api:

Lifecycle events
^^^^^^^^^^^^^^^^^

The lifecycle events track function (service method) execution, i.e. from start to done or error,
to provide logging and related operations. They are coded with the subject/observer pattern. Most people won't need to do anything with these
classes, but they are designed to be extensible. Since :class:`ServiceMethod` inherits from
:class:`LifecycleSubject`, new observers that take actions based on events can be added
at any time. The base classes are below.

.. currentmodule:: biokbase.narrative.common.service

.. autoclass:: LifecycleSubject
    :members:

.. autoclass:: LifecycleObserver
    :members:

Built-in observers for lifecycle events
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The two default observers are for history of the timings, and communicating
the current status back to the front end.

.. autoclass:: LifecycleHistory
    :members:

.. autoclass:: LifecyclePrinter
    :members:

.. _api-examples:

Examples
--------

Below is the source code showing usage of many of the API calls.

.. literalinclude:: ../biokbase/narrative/common/service.py
    :pyobject: example

.. SOME footnotes

.. [#svcmeth] called ServiceMethod in the code
