/*

RESTful Microbial Communities object and resource API

*/
module MicrobialCommunitiesQC : MicrobialCommunitiesQC {
	typedef structure {
/*
id of the metagenome to be analyzed
*/
		string id;
	} GetDriseeComputeParams;
	typedef structure {
/*
	computation time of the job at the time of the query
*/
		string time;
/*
	status of the compute, one of [ waiting, running, error, complete ]
*/
		string status;
/*
	the error message if one ocurred, otherwise an empty string
*/
		string error;
/*
	id of the metagenome to be analyzed
*/
		string id;
	} DriseeCompute;
	typedef structure {
/*
unique object identifier
*/
		string id;
	} GetDriseeInstanceParams;
	typedef structure {
/*
	Version of the drisee score 
*/
		string version;
		mapping<string, string> substitution;
/*
	insertion deletion quotient
*/
		float insertion_delition;
/*
	Creation time for this drisee resource
*/
		string created;
/*
	Unique ID of the sequence file calculated the drisee error from
*/
		string id;
/*
	cumulative drisee error
*/
		float total_errors;
	} DriseeInstance;
	typedef structure {
/*
maximum number of basepairs to analyzed, default 100
*/
		int basepairs;
/*
id of the metagenome to be analyzed
*/
		string id;
/*
maximum number of sequences to be analyzed, default 100000
*/
		int sequences;
	} GetHistogramComputeParams;
	typedef structure {
/*
	computation time of the job at the time of the query
*/
		string time;
/*
	status of the compute, one of [ waiting, running, error, complete ]
*/
		string status;
/*
	the error message if one ocurred, otherwise an empty string
*/
		string error;
/*
	id of the metagenome to be analyzed
*/
		string id;
	} HistogramCompute;
	typedef structure {
/*
unique object identifier
*/
		string id;
	} GetHistogramInstanceParams;
	typedef structure {
/*
	Creation time for this drisee resource
*/
		string created;
/*
	Version of the drisee score 
*/
		string version;
/*
	Unique ID of the sequence file calculated the drisee error from
*/
		string id;
	} HistogramInstance;
	typedef structure {
/*
lenght of the kmers, default is 15
*/
		int kmer_length;
/*
id of the metagenome to be analyzed
*/
		string id;
	} GetKmerComputeParams;
	typedef structure {
/*
	computation time of the job at the time of the query
*/
		string time;
/*
	status of the compute, one of [ waiting, running, error, complete ]
*/
		string status;
/*
	the error message if one ocurred, otherwise an empty string
*/
		string error;
/*
	id of the metagenome to be analyzed
*/
		string id;
	} KmerCompute;
	typedef structure {
/*
unique object identifier
*/
		string id;
	} GetKmerInstanceParams;
	typedef structure {
/*
	Creation time for this drisee resource
*/
		string created;
/*
	Version of the drisee score 
*/
		string version;
/*
	Unique ID of the sequence file calculated the drisee error from
*/
		string id;
	} KmerInstance;


/* quality assessment of metagenomic sequence
computes quality assessment data of a metagenomic sequence
*/
	funcdef get_drisee_compute(GetDriseeComputeParams) returns (DriseeCompute);


/* quality assessment of metagenomic sequence
Returns a single object.
*/
	funcdef get_drisee_instance(GetDriseeInstanceParams) returns (DriseeInstance);


/* quality assessment of metagenomic sequence
computes quality assessment data of a metagenomic sequence
*/
	funcdef get_histogram_compute(GetHistogramComputeParams) returns (HistogramCompute);


/* quality assessment of metagenomic sequence
Returns a single object.
*/
	funcdef get_histogram_instance(GetHistogramInstanceParams) returns (HistogramInstance);


/* quality assessment of metagenomic sequence
computes quality assessment data of a metagenomic sequence
*/
	funcdef get_kmer_compute(GetKmerComputeParams) returns (KmerCompute);


/* quality assessment of metagenomic sequence
Returns a single object.
*/
	funcdef get_kmer_instance(GetKmerInstanceParams) returns (KmerInstance);
};